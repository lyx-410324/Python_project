# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MingDoorActivationKit.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys
import serial
from random import randrange
import win32api,win32con

from exclefunction import SaveMacAndActivationCode, SaveMacInDictory
from scanport import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QModelIndex
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import QAbstractItemView, QHeaderView, QMessageBox, QTableView

HELPFILEPATH = 'help.txt'
MACFILEPATH = "./MacFilePath.txt"


class Ui_GGSmartLockActivationKit(object):
    COM_OPEN = 1
    COM_CLOSE = 0
    com = ''
    baudrate = 0
    openFlag = COM_CLOSE
    ser = ''

    def setupUi(self, GGSmartLockActivationKit):
        GGSmartLockActivationKit.setObjectName("GGSmartLockActivationKit")
        GGSmartLockActivationKit.resize(650, 600)
        GGSmartLockActivationKit.setMaximumSize(650, 600)
        GGSmartLockActivationKit.setMinimumSize(650, 600)
        GGSmartLockActivationKit.setAutoFillBackground(True)
        GGSmartLockActivationKit.setStyleSheet("background-color: rgb(200, 170, 140);")
        GGSmartLockActivationKit.setStyleSheet("font: 9pt Arial")
        self.centralwidget = QtWidgets.QWidget(GGSmartLockActivationKit)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 50, 80, 30))
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(280, 50, 60, 30))
        self.label_2.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(50, 95, 80, 30))
        self.label_3.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(280, 135, 60, 30))
        self.label_4.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(50, 135, 80, 30))
        self.label_5.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(510, 50, 80, 30))
        self.pushButton.setStyleSheet("background-color: rgb(170, 255, 0);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(510, 115, 80, 30))
        self.pushButton_2.setStyleSheet("background-color: rgb(170, 255, 0);")
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(595, 50, 50, 30))
        self.pushButton_4.setStyleSheet("background-color: rgb(170, 255, 0);")
        self.pushButton_4.setObjectName("pushButton_3")

        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(130, 50, 150, 30))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.setStyleSheet("font: 12pt Arial")
        items = ["4800", "9600", "19200", "38400", "115200"]
        self.comboBox.addItems(items)
        self.comboBox.setCurrentIndex(1)  # 设置默认值
        # self.comboBox.currentText()  # 获得当前内容

        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(340, 50, 150, 30))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.setStyleSheet("font: 12pt Arial")
        items = getportlist()
        self.comboBox_2.addItems(items)
        self.comboBox_2.setCurrentIndex(1)  # 设置默认值
        # self.comboBox_2.currentText()  # 获得当前内容

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(130, 95, 360, 30))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setAlignment(Qt.AlignVCenter)
        self.textEdit.setEnabled(False)
        self.textEdit.setFontPointSize(10)

        # self.textEdit.setFontPointSize(14)
        # self.textEdit.setAlignment(Qt.AlignHCenter)
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(340, 135, 150, 30))
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_2.setAlignment(Qt.AlignVCenter)
        self.textEdit_2.setEnabled(False)
        self.textEdit_2.setFontPointSize(10)
        # self.textEdit_2.setAlignment(Qt.AlignHCenter)

        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(130, 135, 150, 30))
        self.textEdit_3.setObjectName("textEdit_3")
        self.textEdit_3.setAlignment(Qt.AlignVCenter)
        self.textEdit_3.setEnabled(False)
        self.textEdit_3.setFontPointSize(10)

        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(45, 170, 560, 390))
        self.tableView.setStyleSheet("background-color: rgb(200, 191, 194);")
        self.tableView.setObjectName("tableView")
        # 设置表格的单元为只读属性，即不能编辑
        self.tableView.setEditTriggers(QAbstractItemView.NoEditTriggers)
        # 垂直滚动条始终开启
        self.tableView.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        # 根据空间自动改变列宽并且不可修改列宽度
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
        # 设置横向表头不可见
        # self.tableView.horizontalHeader().setVisible(False)
        # 设置纵向表头不可见
        # self.tableView.verticalHeader().setVisible(False)
        # 创建一个 0行3列 的标准模型
        self.model = QStandardItemModel(0, 4)
        # 设置表头标签
        self.model.setHorizontalHeaderLabels(['序列号', '试用码', '激活码', '操作状态'])
        self.tableView.setModel(self.model)
        self.tableView.setColumnWidth(0, 140)
        self.tableView.setColumnWidth(1, 140)
        self.tableView.setColumnWidth(2, 140)
        self.tableView.setColumnWidth(3, 140)
        # self.model.insertRow(0,[QStandardItem('ok'),QStandardItem('OK'),QStandardItem('OK')])

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(570, 0, 80, 30))
        self.pushButton_3.setStyleSheet("color: rgb(255, 0, 0);")
        self.pushButton_3.setObjectName("pushButton_3")
        GGSmartLockActivationKit.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(GGSmartLockActivationKit)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 650, 23))
        self.menubar.setObjectName("menubar")
        GGSmartLockActivationKit.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(GGSmartLockActivationKit)
        self.statusbar.setObjectName("statusbar")
        GGSmartLockActivationKit.setStatusBar(self.statusbar)

        self.retranslateUi(GGSmartLockActivationKit)
        QtCore.QMetaObject.connectSlotsByName(GGSmartLockActivationKit)

    def retranslateUi(self, GGSmartLockActivationKit):
        _translate = QtCore.QCoreApplication.translate
        GGSmartLockActivationKit.setWindowTitle(_translate("GGSmartLockActivationKit", "GGSmartLockActivationKit"))
        self.label.setText(_translate("GGSmartLockActivationKit", "波特率："))
        self.label_2.setText(_translate("GGSmartLockActivationKit", "串口号："))
        self.label_3.setText(_translate("GGSmartLockActivationKit", "产品序列号："))
        self.label_4.setText(_translate("GGSmartLockActivationKit", "激活码："))
        self.label_5.setText(_translate("GGSmartLockActivationKit", "试用码："))
        self.pushButton.setText(_translate("GGSmartLockActivationKit", "打开串口"))
        self.pushButton_2.setText(_translate("GGSmartLockActivationKit", "发送激活码"))
        self.pushButton_3.setText(_translate("GGSmartLockActivationKit", "帮助说明"))
        self.pushButton_4.setText(_translate("GGSmartLockActivationKit", "刷新串口"))

        self.pushButton.clicked.connect(self.Serial_Onclick)
        self.pushButton_2.clicked.connect(self.Actived_Onclick)
        self.pushButton_3.clicked.connect(self.OpenHelptxt)
        self.pushButton_4.clicked.connect(self.Update_Onclick)

    def messageDialog(self, title, message):
        msg_box = QMessageBox(QMessageBox.Warning, title, message)
        msg_box.exec_()

    def compare(self, list1, list2):
        if len(list1) == len(list2):
            for i in range(0, len(list1)):
                # 两个列表对应元素相同，则直接过
                if list1[i] is list2[i]:
                    pass
                else:  # 两个列表对应元素不同，则输出对应的索引
                    return False
        else:
            return False
        return True

    def getMacSerial(self):
        Mac_str = ''
        if not os.path.exists(MACFILEPATH):
            fd = open(MACFILEPATH,'w')
            fd.close()
        fd = open(MACFILEPATH, 'r')
        Mac = fd.readline()
        fd.close()
        if Mac == '':
            Mac = int(0)
        else:
            Mac = int(Mac)
            # print(Mac)
        Mac = Mac + 1
        win32api.SetFileAttributes(MACFILEPATH, win32con.FILE_ATTRIBUTE_NORMAL)
        fd = open(MACFILEPATH, 'w')
        fd.write(str(Mac))
        fd.flush()
        fd.close()
        win32api.SetFileAttributes(MACFILEPATH,win32con.FILE_ATTRIBUTE_READONLY)
        for i in range(0, 3):
            Mac_str = Mac_str + str('%02x' % ((Mac >> (2 - i) * 8) & 0xFF))
            if i != 2:
                Mac_str = Mac_str + str('-')
        print(Mac_str)
        return Mac_str

    def getActiveCode(self):
        # MacSerial = [0 for i in range(0, 6)]
        Active_Num = 0
        Active_str = ''
        # 打印0-9之间的随机整数
        for i in range(0, 6):
            Active_Num = (Active_Num << 4) + randrange(10)

        for i in range(0, 6):
            Active_str = Active_str + str((Active_Num >> (5 - i) * 4) & 0xF)
            if i != 5:
                Active_str = Active_str + str('-')
        print(Active_str)
        print(Active_Num)
        return Active_str

    # 获取注册码
    def getRegistrationCode(self):
        Mac_Str = self.getMacSerial()
        Active_str = self.getActiveCode()
        TryoutCode_str = self.getActiveCode()
        print(Mac_Str, Active_str, TryoutCode_str)
        self.textEdit.setText(Mac_Str)
        self.textEdit_2.setText(Active_str)
        self.textEdit_3.setText(TryoutCode_str)

    def OpenHelptxt(self):
        if not os.path.exists(HELPFILEPATH):
            self.messageDialog('提示', '帮助文件不存在或已丢失')
        os.startfile(HELPFILEPATH)

    def Serial_Onclick(self):

        if (str(self.pushButton.text()) == "打开串口"):
            self.com = str(self.comboBox_2.currentText())
            self.baudrate = int(self.comboBox.currentText())
            try:
                self.ser = serial.Serial(self.com, self.baudrate)
                if self.ser.isOpen() is not True:
                    self.ser.open()
            except:
                self.messageDialog('提示', '串口可能被占用，请先关闭串口')
                return
            self.pushButton.setText("关闭串口")
            self.openFlag = self.COM_OPEN
            self.comboBox.setEnabled(False)
            self.comboBox_2.setEnabled(False)

            if self.ser.isOpen() is not True:
                self.ser.open()
        else:
            self.pushButton.setText("打开串口")
            self.openFlag = self.COM_CLOSE
            self.comboBox.setEnabled(True)
            self.comboBox_2.setEnabled(True)
            self.ser.close()

    def exchange10To16(self, data):
        # Data = list(map(int,data))
        Data = [0] * len(data)
        for i in range(len(data)):
            Data[i] = int(data[i], 16)
        print("Data:" + str(Data))
        return Data

    def Actived_Onclick(self):
        try:
            if self.openFlag is self.COM_OPEN:
                Activedata = [0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x0E, 0xDC, 0x03, 0x12, 0x34, 0x56, 0x12,0x34, 0x56, 0x11, 0x11, 0x11, 0x15, 0x00, 0x00]
                wakeupboarddata = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
                wakeupdata = [0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x09, 0xC9, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0xD3]
                comparedata = [0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x38, 0x00, 0x3C]
                # 刷新序列号和激活码
                self.getRegistrationCode()
                self.ser.flushOutput()
                print("wakeupboarddata:" + str(wakeupboarddata))
                for i in range(0,3):
                    self.ser.write(wakeupboarddata)
                    sleep(0.1)
                print("wakeupdata:" + str(wakeupdata))
                self.ser.flushOutput()
                for i in range(0,5):
                    self.ser.write(wakeupdata)
                    sleep(0.1)
                try:
                    Mac_Num = self.exchange10To16(list(self.textEdit.toPlainText().split('-')))
                    print("Mac_Num:" + str(Mac_Num))
                except:
                    self.messageDialog('提示', '请确认产品序列号格式正确')
                    return
                try:
                    Active_Code = [0,0,0]
                    Act = self.exchange10To16(list(self.textEdit_2.toPlainText().split('-')))
                    print(Act)
                    for i in range(0,6,2):
                        Active_Code[(i//2)] = (Act[i]<<4)+Act[i+1]
                    print("Active_Code:" + str(Active_Code))
                except:
                    self.messageDialog('提示', '请确认激活码格式正确')
                    return

                try:
                    Tryout_Code = [0, 0, 0]
                    Try = self.exchange10To16(list(self.textEdit_3.toPlainText().split('-')))
                    i = 0
                    for i in range(0,6,2):
                        Tryout_Code[i // 2] = (Try[i] << 4) + Try[i + 1]
                    print("Tryout_Code:" + str(Tryout_Code))
                except:
                    self.messageDialog('提示', '请确认试用码格式正确')
                    return
                if (len(Mac_Num) != 3) or (len(Active_Code) != 3 or (len(Tryout_Code) != 3)):
                    self.messageDialog('提示', '请输入正确格式的产品序列号和激活码')
                    return
                # 11-13位为序列号0
                for i in range(11, (13 + 1)):
                    Activedata[i] = Mac_Num[i - 11]
                # 14-16位为试用码
                for i in range(14, (16 + 1)):
                    Activedata[i] = Tryout_Code[i - 14]
                # 17-19位为激活码
                for i in range(17, (19 + 1)):
                    Activedata[i] = Active_Code[i - 17]
                # 20位为试用天数
                # 计算校验码(6-20位和)
                Adjust_Code = 0
                for i in range(6, (20 + 1)):
                    Adjust_Code = Adjust_Code + Activedata[i]
                # 填充校验码21-22
                Activedata[21] = (Adjust_Code >> 8) & 0xFF
                Activedata[22] = Adjust_Code & 0xFF
                print("Activedata:" + str(Activedata))
                try:
                    self.ser.flushOutput()
                    #for i in range(0,3):
                    self.ser.write(Activedata)
                    sleep(0.1)

                    # self.ser.close()
                    SaveMacAndActivationCode([self.textEdit.toPlainText(), self.textEdit_3.toPlainText(), self.textEdit_2.toPlainText()])
                    SaveMacInDictory(self.textEdit.toPlainText(), self.textEdit_3.toPlainText())
                    self.model.insertRow(0, [QStandardItem(self.textEdit.toPlainText()),
                                             QStandardItem(self.textEdit_3.toPlainText()),
                                             QStandardItem(self.textEdit_2.toPlainText()), QStandardItem('Successed')])
                except:
                    self.messageDialog('提示', '激活码发送失败')
                    self.model.insertRow(0, [QStandardItem(self.textEdit.toPlainText()),
                                             QStandardItem(self.textEdit_3.toPlainText()),
                                             QStandardItem(self.textEdit_2.toPlainText()), QStandardItem('Failed')])
            else:
                self.messageDialog('提示', '请先打开串口')
        except Exception as msg:
            print(msg)
            self.messageDialog('提示', '串口异常请重新打开串口')
            self.pushButton.setText("打开串口")
            self.openFlag = self.COM_CLOSE
            self.comboBox.setEnabled(True)
            self.comboBox_2.setEnabled(True)
            self.ser.close()


    def Update_Onclick(self):
        if self.openFlag is self.COM_CLOSE:
            self.comboBox_2.clear()
            items = getportlist()
            self.comboBox_2.addItems(items)
            self.comboBox_2.setCurrentIndex(1)  # 设置默认值
            self.messageDialog('提示', '串口已刷新')
        else:
            self.messageDialog('提示', '请先关闭串口再进行刷新')


def showMainWindow():
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_GGSmartLockActivationKit()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    showMainWindow()
    pass
